{
  /* 
  tsconfig.json是ts编译器的配置文件,ts编译器可以根据它的信息对代码进行编译
  如果一个目录下存在一个tsconfig.json文件，那么它意味着这个目录是TypeScript项目的根目录。 tsconfig.json文件中指定了用来编译这个项目的根文件和编译选项。
  
  不带任何输入文件的情况下调用tsc，编译器会从当前目录开始去查找tsconfig.json文件，逐级向上搜索父目录。
  不带任何输入文件的情况下调用tsc，且使用命令行参数--project（或-p）指定一个包含tsconfig.json文件的目录。

  "include" 用来指定哪些ts文件需要被编译
    路径: * 匹配0或多个字符（不包括目录分隔符）
          ? 匹配一个任意字符（不包括目录分隔符）
          ** 递归匹配任意子目录
  "exclude" 不需要被编译的文件目录
            默认值: ["node_modules", "bower_components", "jspm_packages"]
  */
  "include": [
    "./src/**/*"
  ],
  // "exclude": [
  //   "./src/hello/**/*"
  // ]
  /*
  compilerOptions 编译器选项
  
  */
  "compilerOptions": {
    // target 用来指定ts被编译的ES的版本
    // 'es3', 'es5', 'es6', 'es2015', 'es2016', 'es2017', 'es2018', 'es2019', 'es2020', 'es2021', 'es2022', 'esnext'
    "target": "es2015",
    // module 指定要使用模块化的规范
    // 'none', 'commonjs', 'amd', 'system', 'umd', 'es6', 'es2015', 'es2020', 'es2022', 'esnext', 'node12', 'nodenext'
    "module": "system",
    // lib 用来指定项目中使用的库
    // 'es5', 'es6', 'es2015', 'es7', 'es2016', 'es2017', 'es2018', 'es2019', 'es2020', 'es2021', 'es2022', 'esnext', 'dom', 'dom.iterable', 'webworker', 'webworker.importscripts', 'webworker.iterable', 'scripthost', 'es2015.core', 'es2015.collection', 'es2015.generator', 'es2015.iterable', 'es2015.promise', 'es2015.proxy', 'es2015.reflect', 'es2015.symbol', 'es2015.symbol.wellknown', 'es2016.array.include', 'es2017.object', 'es2017.sharedmemory', 'es2017.string', 'es2017.intl', 'es2017.typedarrays', 'es2018.asyncgenerator', 'es2018.asynciterable', 'es2018.intl', 'es2018.promise', 'es2018.regexp', 'es2019.array', 'es2019.object', 'es2019.string', 'es2019.symbol', 'es2020.bigint', 'es2020.promise', 'es2020.sharedmemory', 'es2020.string', 'es2020.symbol.wellknown', 'es2020.intl', 'es2021.promise', 'es2021.string', 'es2021.weakref', 'es2021.intl', 'es2022.array', 'es2022.error', 'es2022.object', 'es2022.string', 'esnext.array', 'esnext.symbol', 'esnext.asynciterable', 'esnext.intl', 'esnext.bigint', 'esnext.string', 'esnext.promise', 'esnext.weakref'
    // 默认注入 ► 针对于--target ES5：DOM，ES5，ScriptHost
    //         ► 针对于--target ES6：DOM，ES6，DOM.Iterable，ScriptHost
    // "lib": [],
    // outDir 用来指定编译后文件所在的目录
    "outDir": "./dist",
    // outFile 将代码合并为一个文件
    // 设置outFlie后, 所有全局作用域中的代码会合并到一个文件中
    // "outFile": "./dist/app.js",
    // allowJs 是否对js文件进行编译, 默认是false
    "allowJs": true,
    // checkJs 是否检查js是否符合语法符合规范, 默认是false
    "checkJs": false,
    // removeCommits 是否移除注释, 默认为false
    "removeComments": false,
    // noEmit 不生成编译后的文件, 默认为false
    "noEmit": false,
    // noEmitOnError 当有错误时不生成编译后的文件, 默认是false
    "noEmitOnError": true,
    // strict 所有严格检查的总开关, 默认为false
    "strict": false,
    // alwaysStrict 用来设置编译后的文件是否使用严格模式, 默认是false
    "alwaysStrict": false,
    // noImplicitAny 不允许隐式any类型, 默认为false
    "noImplicitAny": true,
    // noImplicitThis 不允许类型不明确的this, 默认为false
    "noImplicitThis": false,
    // strictNullChecks 严格的检查空值, 默认为false
    "strictNullChecks": true
  }
}